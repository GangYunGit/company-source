plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.10'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.jobtang'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation group: 'org.modelmapper', name: 'modelmapper', version: '3.0.0'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    // json 파서를 위한 라이브러리
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    // rest 템플릿을 위한 라이브러리
    implementation 'org.apache.httpcomponents:httpcore:4.4.15'
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
}

tasks.named('test') {
    useJUnitPlatform()
}

task sendErrorToMattermost(type: Exec) {
    def log = file("$buildDir/logs/application.log")
    def logContent = log.text
    def webhookUrl = "https://meeting.ssafy.com/hooks/pngm4uzqkt8mbgateix93i7k7h"

    // send only error log
    if (logContent.contains("ERROR")) {
        commandLine 'curl', '-X', 'POST', webhookUrl, '-H', 'Content-Type: application/json', '-d',
                "{\"text\": \"${logContent}\"}"
    }
}

bootRun {
    standardOutput = new ByteArrayOutputStream()
    errorOutput = new ByteArrayOutputStream()
    doFirst {
        classpath = sourceSets.main.runtimeClasspath
    }
    finalizedBy 'sendErrorToMattermost'
}
